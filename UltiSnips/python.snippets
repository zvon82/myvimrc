snippet my "my first python snippet" b
${1:hello}, $1
endsnippet


snippet mapper "Mapper" b
Mapper('''
	${1}
	''',
	add_fields=(
		('${2:!!}', int),
	)
),
endsnippet


snippet mrdomap "mr_do_map" b
mr_do_map([
		${1:Mapper('''
			''',
			add_fields=(
				!!('a', str),
			)
		),}
		${2:Cut(keys=[!!], format_id=True),}
	],
	src_tables=${3:[!!]},
	dst_tables=${4:[!!]},
)
endsnippet


snippet mrdoreduce "mr_do_reduce" b
mr_do_reduce(
	${1:Reducer(Sum())},
	postmap=[${2:!!}],
	src_tables=${3:[!!]},
	dst_tables=${4:[!!]},
)
endsnippet


snippet mrdoaggr "mr_do_aggregate" b
mr_do_aggregate(
	StatAggregator([
			Sum(),
		],
		keys=[${1:!!}],
	),
	premap=[${2:!!}],
	src_tables=${3:[!!]},
	dst_tables=${4:[!!]},
)
endsnippet


snippet mrdojoin "mr_do_join" b
mr_do_join(
	Join(
		${1:!!left},
		${2:!!right},
		keys=[${3:!!}],
		joinType=!!'full outer',
	),
	postmap=[${5:!!}],
	dst_tables=${4:[!!]},
)
endsnippet


snippet newscript "new python script" b
#!/usr/bin/env python
#-*- coding: utf-8 -*-
'''
'''

import sys

import yabs.conf
from yabs.logger import info
from yabs.logconfig import get_logs_regexp_time
from yabs.tabtools import (
    mr_do_map, mr_do_aggregate, mr_do_reduce,
    StatAggregator,
    Sum, Count, Max, Min,
    Mapper, Grep, Cut
)
from yabs.tabutils import (
    TemporaryTableWithMeta, read_ts_table)
from yabs.mapreduce.common import run_action, build_hour_log
from calc_tools.logs import get_period_suffix, get_tablesd
from calc_tools.argparse import get_ap_argparser
from yabs.threadpool import ThreadManager


def !!(args):
    srcs = [el['name'] for el in get_tablesd(args, '!!efv')]
    thread_man = ThreadManager()
    for src in srcs:
        thread_man.addJob(!!, src)
    thread_man.startWorkers()
    thread_man.waitWorkers()
    thread_man.stopWorkers()


if __name__ == '__main__':
    argparser = get_ap_argparser(
        achoices=(
        )
    )
    argparser.add_argument(
        '-e',
        help='',
    )
    args, global_conf = argparser.parse_args()

    if 'copy_0' in args.actions:
        copy_0()

endsnippet


snippet tm "ThreadManager usage" b
tm = ThreadManager()
for ${1:src in srcs}:
    thread_man.addJob(${2:!!}, ${3:src})
tm.startWorkers()
tm.waitWorkers()
tm.stopWorkers()
$0
endsnippet


snippet basicmapper "class inheriting from BasicMapper" b
class ${1:!!}(BasicMapper):
    def __init__(self):
        super($1, self).__init__()

    def __call__(self, records):
        !!for r in records:
            field = getattr(r, self._field_name)
            assert type(field) is str
            new_fields = field.split(self._split_by)
            new_records = [r.__copy__() for i in range(len(new_fields)-1)] + [r]
            for rec, f in izip(new_records, new_fields):
                setattr(rec, self._field_name, f)
                yield rec

    def setFormat(self, format):
        self._format = format.clone()
        self._output_format = format.clone()
        self._output_format.addField(!!, int)
        self._output_format.del_field(!!)

endsnippet


snippet basicreducer "class inheriting from BasicReducer" b
class ${1:!!}(BasicReducer):

    def __init__(self, delay_threshold, *args, **kwargs):
        super($1, self).__init__(*args, **kwargs)

    def __call__(self, key, records):
        for record in records:
            yield record

    def setFormat(self, format):
        super($1, self).setFormat(format, rememberValue=True)
        self._output_format.addField('repeated_hits', int)

endsnippet
